using NUnit.Framework;
using TestCoverage.Rewrite;

namespace TestCoverage.Tests.Rewrite
{
    [TestFixture]
    public class AuditVariablesMapTests
    {

        [Test]
        public void Should_ReturnValidDictionaryName()
        {
            Assert.That(AuditVariablesMap.AuditVariablesListName, Is.EqualTo("Coverage"));
        }

        [Test]
        public void Should_ReturnValidClassName()
        {
            Assert.That(AuditVariablesMap.AuditVariablesListClassName, Is.EqualTo("AuditVariablesAutoGenerated941C"));
        }

        [Test]
        public void Should_GenerateValidSourceCode_Of_AuditVariable()
        {
            string expectedSourceCode =
                "public struct AuditVariable\r\n{\r\n" +
                "public int Span, ExecutionCounter;\r\n" +
                "public System.String DocumentPath,NodePath;\r\n}\r\n";

            string auditVariableSourceCode = AuditVariablesMap.GenerateAuditVariableSourceCode();
            
            Assert.That(auditVariableSourceCode, Is.EqualTo(expectedSourceCode));
        }

        [Test]
        public void Should_GenerateValidVariablesHashSetSourceCode()
        {
            string expectedSourceCode =
                "public static class AuditVariablesAutoGenerated941C\r\n{\r\n\t" +
                "public static System.Collections.Generic.Dictionary<string,AuditVariable> Coverage = new  System.Collections.Generic.Dictionary<string,AuditVariable>();\r\n\t" +
                "public static int ExecutionCounter;\r\n}";

            string classSourceCode = AuditVariablesMap.GenerateVariablesListSourceCode();

            Assert.That(classSourceCode, Is.EqualTo(expectedSourceCode));
        }
    }
}