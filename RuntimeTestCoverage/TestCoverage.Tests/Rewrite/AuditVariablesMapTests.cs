using NUnit.Framework;
using TestCoverage.Rewrite;

namespace TestCoverage.Tests.Rewrite
{
    [TestFixture]
    public class AuditVariablesMapTests
    {

        [Test]
        public void Should_ReturnValidDictionaryName()
        {
            Assert.That(AuditVariablesMap.AuditVariablesListName, Is.EqualTo("Coverage"));
        }

        [Test]
        public void Should_ReturnValidClassName()
        {
            Assert.That(AuditVariablesMap.AuditVariablesListClassName, Is.EqualTo("AuditVariablesAutoGenerated941C"));
        }

        [Test]
        public void Should_GenerateValidSourceCode_Of_AuditVariable()
        {
            const string expectedSourceCode = @"public struct AuditVariable
{
public int Span;
public System.String DocumentPath,NodePath;
        public override bool Equals(object obj)
        {
            return Equals((AuditVariable)obj);
        }

        public bool Equals(AuditVariable other)
        {
            return Span == other.Span && string.Equals(DocumentPath, other.DocumentPath);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return (Span*397) ^ (DocumentPath != null ? DocumentPath.GetHashCode() : 0);
            }
        }
}
";

            string auditVariableSourceCode = AuditVariablesMap.GenerateAuditVariableSourceCode();

            Assert.That(auditVariableSourceCode, Is.EqualTo(expectedSourceCode));
        }

        [Test]
        public void Should_GenerateValidVariablesHashSetSourceCode()
        {
            const string expectedSourceCode = "public static class AuditVariablesAutoGenerated941C\r\n" +
                                              "{\r\n\tpublic static System.Collections.Generic.HashSet<AuditVariable> Coverage = " +
                                              "new  System.Collections.Generic.HashSet<AuditVariable>();\r\n" +
                                              "}";

            string classSourceCode = AuditVariablesMap.GenerateVariablesListSourceCode();

            Assert.That(classSourceCode, Is.EqualTo(expectedSourceCode));
        }
    }
}