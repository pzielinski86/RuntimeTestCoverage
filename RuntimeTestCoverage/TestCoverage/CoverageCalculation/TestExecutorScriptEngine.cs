using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using TestCoverage.Rewrite;

namespace TestCoverage.CoverageCalculation
{
    public class TestExecutorScriptEngine : MarshalByRefObject, ITestExecutorScriptEngine
    {
        public ITestRunResult[] RunTestFixture(string[] references, TestFixtureExecutionScriptParameters pars)
        {
            var assemblies = new List<Assembly>(references.Length);
            assemblies.AddRange(references.Select(Assembly.LoadFrom));

            ITestRunResult[] testResults = Run(assemblies, pars); 

            return testResults;
        }
        
        private AuditVariablePlaceholder[] GetVariables(AuditVariable[] auditVariables)
        {
            var variables = new AuditVariablePlaceholder[auditVariables.Length];

            for (int i = 0; i < auditVariables.Length; i++)
            {
                var value = auditVariables[i];

                var variable = new AuditVariablePlaceholder(value.DocumentPath,
                    value.NodePath,
                    value.Span,
                    value.ExecutionCounter);

                variables[i] = variable;
            }

            return variables;
        }

        private ITestRunResult[] Run(List<Assembly> assemblies, TestFixtureExecutionScriptParameters args)
        {
            var testResults = new List<ITestRunResult>();
            var assembly = assemblies.First(x => x.GetName().Name == args.TestFixtureAssemblyName);

            Type testFixtureType = assembly.GetType(args.TestFixtureTypeFullName);
            object testFixture = Activator.CreateInstance(testFixtureType);

            var testFixtureSetupResults = RunTestFixtureSetup(testFixtureType, testFixture, args.TestFixtureSetUpMethodName);

            if (testFixtureSetupResults != null)
            {
                testResults.Add(testFixtureSetupResults);

                if (testFixtureSetupResults.ErrorMessage != null)
                    return testResults.ToArray();
            }

            var testCasesResults = RunTestCases(args, testFixtureType, testFixture);
            testResults.AddRange(testCasesResults);

            var testFixtureTearDownResults = RunTestFixtureSetup(testFixtureType, testFixture, args.TestFixtureSetUpMethodName);

            if (testFixtureTearDownResults != null)
                testResults.Add(testFixtureTearDownResults);

            return testResults.ToArray();
        }

        private ITestRunResult[] RunTestCases(TestFixtureExecutionScriptParameters args, Type testFixtureType, object testFixture)
        {
            var testResults = new List<ITestRunResult>();

            foreach (TestExecutionScriptParameters testCase in args.TestCases)
            {
                AuditVariablesAutoGenerated941C.Coverage.Clear();

                var newCoverage = RunTestCase(args, testFixtureType, testFixture, testCase);
                testResults.Add(newCoverage);
            }

            return testResults.ToArray();
        }

        private ITestRunResult RunTestCase(TestFixtureExecutionScriptParameters args, Type testFixtureType, object testFixture, TestExecutionScriptParameters testCase)
        {
            string errorMessage = null;
            bool assertionFailed = false;

            try
            {
                RunMethod(testFixtureType, testFixture, args.TestSetUpMethodName);

                if (testCase.IsAsync)
                {
                    dynamic asyncResultsTask = RunMethod(testFixtureType, testFixture, testCase.TestName,
                        testCase.TestParameters);
                    asyncResultsTask.Wait();
                }
                else
                {
                    RunMethod(testFixtureType, testFixture, testCase.TestName, testCase.TestParameters);
                }

                RunMethod(testFixtureType, testFixture, args.TestTearDownMethodName);
            }
            catch (AggregateException e)
            {
                // TODO: nUnit should not be hardcoded here
                if (e.InnerException.Source == "nunit.framework")
                    assertionFailed = true;

                errorMessage = e.InnerException.ToString();
            }
            catch (TargetInvocationException e)
            {
                // TODO: nUnit should not be hardcoded here
                if (e.InnerException.Source == "nunit.framework")
                    assertionFailed = true;

                errorMessage = e.InnerException.ToString();
            }
     
            var newCoverage = new TestRunResult(testCase.TestName,
                GetVariables(AuditVariablesAutoGenerated941C.Coverage.Values.ToArray()),
                errorMessage,
                assertionFailed);

            return newCoverage;
        }

        private object RunMethod(Type testFixtureType, object testFixture, string methodName, params object[] pars)
        {
            if (methodName == null)
                return null;

            return testFixtureType.GetMethod(methodName,
                BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Invoke(testFixture, pars);
        }

        private TestRunResult RunTestFixtureSetup(Type testFixtureType, object testFixture, string methodName)
        {
            AuditVariablesAutoGenerated941C.Coverage.Clear();

            if (methodName == null)
                return null;

            string error = null;
            TestRunResult testRunResult = null;

            try
            {
                RunMethod(testFixtureType, testFixture, methodName);
            }
            catch (Exception e)
            {
                error = e.ToString();
                return null;
            }
            finally
            {
                testRunResult = new TestRunResult(methodName,
                    GetVariables(AuditVariablesAutoGenerated941C.Coverage.Values.ToArray()),
                    error,
                    false);
            }

            return testRunResult;
        }
    }
}