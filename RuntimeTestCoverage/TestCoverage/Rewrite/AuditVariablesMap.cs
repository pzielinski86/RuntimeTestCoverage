using System.Text;

namespace TestCoverage.Rewrite
{
    public static class AuditVariablesMap
    {
        public static string GenerateVariablesListSourceCode()
        {
            StringBuilder classBuilder = new StringBuilder();

            classBuilder.AppendLine(string.Format("public static class {0}", AuditVariablesListClassName));
            classBuilder.AppendLine("{");

            string list = $"\tpublic static System.Collections.Generic.Dictionary<string,{AuditVariablePlaceholder.AuditVariableStructureName}> {AuditVariablesListName} = new  System.Collections.Generic.Dictionary<string,{AuditVariablePlaceholder.AuditVariableStructureName}>();";
            classBuilder.AppendLine(list);
            classBuilder.AppendLine("\tpublic static int ExecutionCounter;");

            classBuilder.Append("}");

            return classBuilder.ToString();
        }

        public static string GenerateCode()
        {
            return GenerateAuditVariableSourceCode() + GenerateVariablesListSourceCode();
        }

        public static string AuditVariablesListClassName
        {
            get { return "AuditVariablesAutoGenerated941C"; }
        }

        public static string AuditVariablesListName
        {
            get { return "Coverage"; }
        }

        public static string ExecutionCounterCall => $"{AuditVariablesListClassName}.ExecutionCounter";

        public static string GenerateAuditVariableSourceCode()
        {
            StringBuilder codeBuilder = new StringBuilder();
            codeBuilder.AppendLine($"public struct {AuditVariablePlaceholder.AuditVariableStructureName}");
            codeBuilder.AppendLine("{");
            codeBuilder.AppendLine("public int Span, ExecutionCounter;");
            codeBuilder.AppendLine("public System.String DocumentPath,NodePath;");
            codeBuilder.AppendLine("}");

            return codeBuilder.ToString();
        }
    }
}