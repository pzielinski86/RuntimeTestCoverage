/*
  Input parameters:
   - TestFixtureTypeFullName   
   - TestSetUpMethodName
   - TestTearDownMethodName
   - TestFixtureSetUpMethodName
   - TestFixtureTearDownMethodName
   TestCases
		- TestName
		- TestParameters
		- IsAsync
 Output parameters
    - output System.Collections.Generic.List<object> where the object is an anonymous type 
		new {TestName, ErrorMessage, Variables}
*/

//---->START

var output = new System.Collections.Generic.List<object>();

Type testFixtureType = Type.GetType(TestFixtureTypeFullName);
object testFixture = System.Activator.CreateInstance(testFixtureType);
    
// execute TestFixtureSetUp
if(TestFixtureSetUpMethodName != null)
    testFixtureType.GetMethod(TestFixtureSetUpMethodName,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, null);

// execute all test cases, one by one.
foreach(var testCase in TestCases)
{
    AuditVariablesAutoGenerated941C.Coverage.Clear();
    string errorMessage=null;

    try
    {
        // execute TestSetUp
        if(TestSetUpMethodName != null)
            testFixtureType.GetMethod(TestSetUpMethodName,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, null);

		// execute test asynchronously or synchronously
        if(testCase.IsAsync)
            ((dynamic)testFixtureType.GetMethod(testCase.TestName, BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, testCase.TestParameters)).Wait();
        else
            testFixtureType.GetMethod(testCase.TestName, BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, testCase.TestParameters);

		// execute test tear down
        if(TestTearDownMethodName != null)
            testFixtureType.GetMethod(TestTearDownMethodName,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, null);
    }
    catch(AggregateException e)
    {
        errorMessage=e.InnerException.ToString();
    }
    catch(TargetInvocationException e)
    {
        errorMessage=e.InnerException.ToString();
    }
    catch(Exception e)
    {
        errorMessage=e.ToString();
    }

    var newCoverage = new
    {
        TestName = testCase.TestName,
        ErrorMessage = errorMessage,
        Variables = AuditVariablesAutoGenerated941C.Coverage.Values.ToArray()
    };

    output.Add(newCoverage);
}

// execute TestFixtureTearDown
if(TestFixtureTearDownMethodName != null)
    testFixtureType.GetMethod(TestFixtureTearDownMethodName,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, null);

