/*
  Input parameters:
   - TestFixtureTypeFullName
   
   - TestSetUpMethodName
   - TestTearDownMethodName
   - TestFixtureSetUpMethodName
   - TestFixtureTearDownMethodName

   - TestName
   - TestParameters
   - IsAsync
 Output parameters
    - auditLog
	- errorMessage
*/


var output = new System.Collections.Generic.List<dynamic>();

	Type testFixtureType = Type.GetType(TestFixtureTypeFullName);
	object testFixture = System.Activator.CreateInstance(testFixtureType);
	
	// execute TestFixtureSetUp
	if(TestFixtureSetUpMethodName != null)
		testFixtureType.GetMethod(TestFixtureSetUpMethodName,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, null);

	foreach(var testCase in TestCases)
	{
	    AuditVariablesAutoGenerated941C.Coverage.Clear();
		string errorMessage=null;

		try
		{
			// execute TestSetUp
			if(testCase.SetUpMethodName != null)
				testFixtureType.GetMethod(testCase.SetUpMethodName,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, null);

			if(testCase.IsAsync)
				((dynamic)testFixtureType.GetMethod(testCase.TestName, BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, testCase.TestParameters)).Wait();
			else
				testFixtureType.GetMethod(testCase.TestName, BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, testCase.TestParameters);

			if(testCase.TearDownMethodName != null)
				testFixtureType.GetMethod(testCase.TearDownMethodName,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Invoke(testFixture, null);
		}
		catch(AggregateException e)
		{
			errorMessage=e.InnerException.ToString();
		}
		catch(TargetInvocationException e)
		{
			errorMessage=e.InnerException.ToString();
		}
		catch(Exception e)
		{
			errorMessage=e.ToString();
		}

		var newCoverage = new
		{
			TestName = testCase.TestName,
			ErrorMessage = errorMessage,
			Variables = AuditVariablesAutoGenerated941C.Coverage.Values.ToArray()
		};

		output.Add(newCoverage);
	}

